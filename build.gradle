apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'jasmineGradle'

project.ext {
    dbDriver = 'com.mysql.jdbc.Driver'
    dbHostName =  hasProperty('dbHost') ? dbHost : 'localhost'
    dbUrl = 'jdbc:mysql://' + dbHostName +
            ':3306/'
    dbUsername = 'root'
    dbPassword = hasProperty('dbPassword') ? dbPassword : ''
}

repositories {
    mavenCentral()
    maven {
        url "http://mavenrepo.google-api-java-client.googlecode.com/hg"
    }
}

buildscript {
    repositories {
        mavenCentral()

    }
    dependencies {
        classpath "com.github.dzhaughnroth:jasmine-gradle-plugin:0.4"
    }
}

configurations {
    sql
}

dependencies {
    compile 'org.mybatis:mybatis:3.1.1',
            'org.mybatis:mybatis-spring:1.1.1',
            'javax.servlet:servlet-api:2.5',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'commons-dbcp:commons-dbcp:1.4',
            'org.springframework:spring-orm:3.1.0.RELEASE',
            'org.freemarker:freemarker:2.3.19',
            'ch.qos.logback:logback-classic:1.0.0',
            'commons-lang:commons-lang:2.6',
            'org.jasig.cas.client:cas-client-core:3.2.1',
            'mysql:mysql-connector-java:5.1.21',
            'com.dbdeploy:dbdeploy-ant:3.0M3',
            'com.google.api-client:google-api-client:1.11.0-beta',
            'com.google.apis:google-api-services-books:v1-rev11-1.8.0-beta',
            'com.google.http-client:google-http-client-jackson2:1.11.0-beta'

    testCompile 'junit:junit:4.10',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.25.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.25.0'

    sql 'mysql:mysql-connector-java:5.1.21'
}

jettyRun {
    contextPath = 'twu'
}

test {
    exclude '**/functional/com/thoughtworks/**/*.*'
    exclude '**/smoke/com/thoughtworks/**/*.*'

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

task functionalTest(type: Test) {
    include '**/functional/com/thoughtworks/**/*.*'

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    doFirst {
        startJetty()
    }

    doLast {
        stopJetty()
    }
}

task smokeTest(type: Test) {
    include '**/smoke/com/thoughtworks/**/*.*'

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    doFirst {
        startJetty()
    }

    doLast {
        stopJetty()
    }
}

task createDatabase << {
    ant.sql(driver: dbDriver,
            url: dbUrl,
            userid: dbUsername,
            password: dbPassword,
            encoding: 'UTF-8',
            classpath: configurations.compile.asPath) {
        fileset(file: './src/main/resources/deploy/sql/create_database_readerfeeder.sql')
    }
}

task createChangelogTable << {
    ant.sql(driver: dbDriver,
            url: dbUrl,
            userid: dbUsername,
            password: dbPassword,
            encoding: 'UTF-8',
            classpath: configurations.compile.asPath) {
        fileset(file: './src/main/resources/deploy/sql/create_changelog_table.sql')
    }
}

ant.taskdef(name: 'dbdeploy',
        classname: 'com.dbdeploy.AntTarget',
        classpath: configurations.compile.asPath
)

task updateDatabase  << {
    ant.dbdeploy(driver: dbDriver,
            url: dbUrl+'readerfeeder',
            userid: dbUsername,
            password: dbPassword,
            dir: './src/main/resources/deploy/sql',
            dbms: 'mysql'
    )
}

def startJetty() {
    jettyRun.httpPort = 8080
    jettyRun.daemon = true
    jettyRun.execute()
}

def stopJetty() {
    jettyStop.stopKey="Ctrl+c"
    jettyStop.stopPort=8080
    jettyStop.execute()
}
